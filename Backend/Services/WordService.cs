using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BackendFramework.Interfaces;
using BackendFramework.Models;
using BackendFramework.Otel;

namespace BackendFramework.Services
{
    /// <summary> More complex functions and application logic for <see cref="Word"/>s </summary>
    public class WordService : IWordService
    {
        private readonly IWordRepository _wordRepo;

        private const string otelTagName = "otel.WordService";

        public WordService(IWordRepository wordRepo)
        {
            _wordRepo = wordRepo;
        }

        /// <summary>
        /// Clear the given word's Id and Metadata to be generated by the word repo,
        /// and add the given userId to EditedBy if it's not already last on the list.
        /// </summary>
        private static Word PrepEditedData(string userId, Word word)
        {
            word.Id = "";
            word.Modified = "";
            if (!string.IsNullOrWhiteSpace(userId) && userId != word.EditedBy.LastOrDefault(""))
            {
                word.EditedBy.Add(userId);
            }
            return word;
        }

        /// <summary> Creates a new word with updated edited data. </summary>
        /// <returns> The created word </returns>
        public async Task<Word> Create(string userId, Word word)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "creating a word");

            return await _wordRepo.Create(PrepEditedData(userId, word));
        }

        /// <summary> Creates new words with updated edited data. </summary>
        /// <returns> The created word </returns>
        public async Task<List<Word>> Create(string userId, List<Word> words)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "creating words");

            return await _wordRepo.Create(words.Select(w => PrepEditedData(userId, w)).ToList());
        }

        /// <summary> Adds a new word with updated edited data. </summary>
        /// <returns> The added word </returns>
        private async Task<Word> Add(string userId, Word word)
        {
            return await _wordRepo.Add(PrepEditedData(userId, word));
        }

        /// <summary> Makes a new word in Frontier that has deleted tag on each sense </summary>
        /// <returns> A bool: success of operation </returns>
        public async Task<bool> Delete(string projectId, string userId, string wordId)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "deleting a word");

            var wordIsInFrontier = await _wordRepo.DeleteFrontier(projectId, wordId);

            // We only want to add the deleted word if the word started in the frontier.
            if (!wordIsInFrontier)
            {
                return wordIsInFrontier;
            }

            var wordToDelete = await _wordRepo.GetWord(projectId, wordId);
            if (wordToDelete is null)
            {
                return false;
            }

            wordToDelete.EditedBy = new List<string>();
            wordToDelete.History = new List<string> { wordId };
            wordToDelete.Accessibility = Status.Deleted;

            foreach (var senseAcc in wordToDelete.Senses)
            {
                senseAcc.Accessibility = Status.Deleted;
            }

            await Create(userId, wordToDelete);

            return wordIsInFrontier;
        }

        /// <summary> Removes audio with specified fileName from a word </summary>
        /// <returns> New word </returns>
        public async Task<Word?> Delete(string projectId, string userId, string wordId, string fileName)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "deleting an audio");

            var wordWithAudioToDelete = await _wordRepo.GetWord(projectId, wordId);
            if (wordWithAudioToDelete is null)
            {
                return null;
            }

            var audioToRemove = wordWithAudioToDelete.Audio.Find(a => a.FileName == fileName);
            if (audioToRemove is null)
            {
                return null;
            }

            // We only want to update words that are in the frontier
            if (!await _wordRepo.DeleteFrontier(projectId, wordId))
            {
                return null;
            }

            wordWithAudioToDelete.Audio.Remove(audioToRemove);
            wordWithAudioToDelete.History.Add(wordId);

            return await Create(userId, wordWithAudioToDelete);
        }

        /// <summary> Deletes word in frontier collection and adds word with deleted tag in word collection </summary>
        /// <returns> A string: id of new word </returns>
        public async Task<string?> DeleteFrontierWord(string projectId, string userId, string wordId)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "deleting a word from Frontier");

            var wordIsInFrontier = await _wordRepo.DeleteFrontier(projectId, wordId);
            if (!wordIsInFrontier)
            {
                return null;
            }

            var word = await _wordRepo.GetWord(projectId, wordId);
            if (word is null)
            {
                return null;
            }

            word.ProjectId = projectId;
            word.Accessibility = Status.Deleted;
            word.History.Add(wordId);

            return (await Add(userId, word)).Id;
        }

        /// <summary> Restores words to the Frontier </summary>
        /// <returns> A bool: true if successful, false if any don't exist or are already in the Frontier. </returns>
        public async Task<bool> RestoreFrontierWords(string projectId, List<string> wordIds)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "restoring words to Frontier");

            var words = new List<Word>();
            foreach (var id in wordIds)
            {
                var word = await _wordRepo.GetWord(projectId, id);
                if (word is null || await _wordRepo.IsInFrontier(projectId, id))
                {
                    return false;
                }
                words.Add(word);
            }
            await _wordRepo.AddFrontier(words);
            return true;
        }

        /// <summary> Makes a new word in the Frontier with changes made </summary>
        /// <returns> A bool: success of operation </returns>
        public async Task<bool> Update(string projectId, string userId, string wordId, Word word)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "updating a word in Frontier");

            var wordIsInFrontier = await _wordRepo.DeleteFrontier(projectId, wordId);

            // We only want to update words that are in the frontier
            if (!wordIsInFrontier)
            {
                return wordIsInFrontier;
            }

            word.ProjectId = projectId;
            word.History.Add(wordId);

            await Create(userId, word);

            return wordIsInFrontier;
        }

        /// <summary> Checks if a word being added is a duplicate of a preexisting word. </summary>
        /// <returns> The id string of the existing word, or null if none. </returns>
        public async Task<string?> FindContainingWord(Word word)
        {
            using var activity = OtelService.StartActivityWithTag(otelTagName, "checking for duplicates of a word");

            var wordsWithVern = await _wordRepo.GetFrontierWithVernacular(word.ProjectId, word.Vernacular);
            var duplicatedWord = wordsWithVern.Find(w => w.Contains(word));
            return duplicatedWord?.Id;
        }
    }
}
