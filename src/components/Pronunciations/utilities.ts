import { Pronunciation } from "api";
import { uploadAudio } from "backend";
import { FileWithSpeakerId } from "types/word";

/** Generate a timestamp-based file name for the given `wordId`. */
export function getFileNameForWord(wordId: string): string {
  const fourCharParts = wordId.match(/.{1,6}/g);
  const compressed = fourCharParts?.map((i) =>
    Number("0x" + i).toString(36)
  ) ?? ["unknownWord"];
  return compressed.join("") + "_" + new Date().getTime().toString(36);
}

/** Given a pronunciation with .fileName generated by `URL.createObjectURL()`,
 * add that audio file to the word with the given `wordId`.
 * Return the id of the updated word. */
export async function uploadFileFromPronunciation(
  wordId: string,
  audio: Pronunciation
): Promise<string> {
  const { fileName, speakerId } = audio;
  const audioBlob = await fetch(fileName).then((result) => result.blob());
  const file = new File([audioBlob], getFileNameForWord(wordId), {
    type: audioBlob.type,
    lastModified: Date.now(),
  });
  (file as FileWithSpeakerId).speakerId = speakerId;
  const newId = await uploadAudio(wordId, file);
  URL.revokeObjectURL(fileName);
  return newId;
}
