import { type Pronunciation } from "api/models";
import { uploadAudio } from "backend";
import { type FileWithSpeakerId } from "types/word";

/** Generate a timestamp-based file name for the given `wordId`. */
export function getFileNameForWord(wordId: string): string {
  const fourCharParts = wordId.match(/.{1,6}/g);
  const compressed = fourCharParts?.map((i) =>
    Number("0x" + i).toString(36)
  ) ?? ["unknownWord"];
  return compressed.join("") + "_" + new Date().getTime().toString(36);
}

/** Given a pronunciation with .fileName generated by `URL.createObjectURL()`,
 * add that audio file to the word with the given `wordId`.
 * Return the id of the updated word. */
export async function uploadFileFromPronunciation(
  wordId: string,
  audio: Pronunciation
): Promise<string> {
  const { fileName, speakerId } = audio;
  const audioBlob = await fetch(fileName).then((result) => result.blob());
  const file = new File([audioBlob], getFileNameForWord(wordId), {
    type: audioBlob.type,
    lastModified: Date.now(),
  });
  (file as FileWithSpeakerId).speakerId = speakerId;
  const newId = await uploadAudio(wordId, file);
  URL.revokeObjectURL(fileName);
  return newId;
}

/** Names of Firefox browsers in user-agent strings, all lowercase.
 *
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent/Firefox */
const firefoxBrowsers = ["firefox", "focus", "fxios"];

/** Check if a user-agent string is of a Firefox browser. */
function isUserAgentFirefox(userAgent: string): boolean {
  const uaLower = userAgent.toLocaleLowerCase();
  return firefoxBrowsers.some((browser) => uaLower.includes(browser));
}

/** Checks if the user has granted mic permission to The Combine,
 * except on Firefox assumes permission is granted. */
export async function checkMicPermission(): Promise<boolean> {
  if (!isUserAgentFirefox(navigator.userAgent)) {
    const result = await navigator.permissions.query({
      name: "microphone" as PermissionName, // This causes a TypeError on Firefox.
    });
    return result.state === "granted";
  }
  return true;
}
