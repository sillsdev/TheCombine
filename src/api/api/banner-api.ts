/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { SiteBanner } from "../models";
/**
 * BannerApi - axios parameter creator
 * @export
 */
export const BannerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBanner: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/banner`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SiteBanner} siteBanner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBanner: async (
      siteBanner: SiteBanner,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'siteBanner' is not null or undefined
      assertParamExists("updateBanner", "siteBanner", siteBanner);
      const localVarPath = `/v1/banner`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        siteBanner,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BannerApi - functional programming interface
 * @export
 */
export const BannerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BannerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBanner(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteBanner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBanner(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {SiteBanner} siteBanner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBanner(
      siteBanner: SiteBanner,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBanner(
        siteBanner,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * BannerApi - factory interface
 * @export
 */
export const BannerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BannerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBanner(options?: any): AxiosPromise<SiteBanner> {
      return localVarFp
        .getBanner(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SiteBanner} siteBanner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBanner(siteBanner: SiteBanner, options?: any): AxiosPromise<string> {
      return localVarFp
        .updateBanner(siteBanner, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for updateBanner operation in BannerApi.
 * @export
 * @interface BannerApiUpdateBannerRequest
 */
export interface BannerApiUpdateBannerRequest {
  /**
   *
   * @type {SiteBanner}
   * @memberof BannerApiUpdateBanner
   */
  readonly siteBanner: SiteBanner;
}

/**
 * BannerApi - object-oriented interface
 * @export
 * @class BannerApi
 * @extends {BaseAPI}
 */
export class BannerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BannerApi
   */
  public getBanner(options?: any) {
    return BannerApiFp(this.configuration)
      .getBanner(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {BannerApiUpdateBannerRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BannerApi
   */
  public updateBanner(
    requestParameters: BannerApiUpdateBannerRequest,
    options?: any
  ) {
    return BannerApiFp(this.configuration)
      .updateBanner(requestParameters.siteBanner, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
