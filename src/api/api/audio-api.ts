/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { FileStream } from "../models";
/**
 * AudioApi - axios parameter creator
 * @export
 */
export const AudioApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete: async (
      projectId: string,
      wordId: string,
      fileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete",
        "wordId",
        wordId
      );
      // verify required parameter 'fileName' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete",
        "fileName",
        fileName
      );
      const localVarPath = `/v1/projects/{projectId}/words/{wordId}/audio/delete/{fileName}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)))
        .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet: async (
      projectId: string,
      wordId: string,
      fileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet",
        "wordId",
        wordId
      );
      // verify required parameter 'fileName' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet",
        "fileName",
        fileName
      );
      const localVarPath = `/v1/projects/{projectId}/words/{wordId}/audio/download/{fileName}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)))
        .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {any} file
     * @param {string} name
     * @param {string} filePath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioUploadPost: async (
      projectId: string,
      wordId: string,
      file: any,
      name: string,
      filePath: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioUploadPost",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioUploadPost",
        "wordId",
        wordId
      );
      // verify required parameter 'file' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioUploadPost",
        "file",
        file
      );
      // verify required parameter 'name' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioUploadPost",
        "name",
        name
      );
      // verify required parameter 'filePath' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdAudioUploadPost",
        "filePath",
        filePath
      );
      const localVarPath = `/v1/projects/{projectId}/words/{wordId}/audio/upload`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (file !== undefined) {
        localVarFormParams.append("File", file as any);
      }

      if (name !== undefined) {
        localVarFormParams.append("Name", name as any);
      }

      if (filePath !== undefined) {
        localVarFormParams.append("FilePath", filePath as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AudioApi - functional programming interface
 * @export
 */
export const AudioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AudioApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
      projectId: string,
      wordId: string,
      fileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
        projectId,
        wordId,
        fileName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
      projectId: string,
      wordId: string,
      fileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileStream>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
        projectId,
        wordId,
        fileName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {any} file
     * @param {string} name
     * @param {string} filePath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsWordIdAudioUploadPost(
      projectId: string,
      wordId: string,
      file: any,
      name: string,
      filePath: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsWordIdAudioUploadPost(
        projectId,
        wordId,
        file,
        name,
        filePath,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AudioApi - factory interface
 * @export
 */
export const AudioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AudioApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
      projectId: string,
      wordId: string,
      fileName: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
          projectId,
          wordId,
          fileName,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
      projectId: string,
      wordId: string,
      fileName: string,
      options?: any
    ): AxiosPromise<FileStream> {
      return localVarFp
        .v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
          projectId,
          wordId,
          fileName,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {any} file
     * @param {string} name
     * @param {string} filePath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdAudioUploadPost(
      projectId: string,
      wordId: string,
      file: any,
      name: string,
      filePath: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdWordsWordIdAudioUploadPost(
          projectId,
          wordId,
          file,
          name,
          filePath,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete operation in AudioApi.
 * @export
 * @interface AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDeleteRequest
 */
export interface AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete
   */
  readonly wordId: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete
   */
  readonly fileName: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet operation in AudioApi.
 * @export
 * @interface AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGetRequest
 */
export interface AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGetRequest {
  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet
   */
  readonly wordId: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet
   */
  readonly fileName: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsWordIdAudioUploadPost operation in AudioApi.
 * @export
 * @interface AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPostRequest
 */
export interface AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPostRequest {
  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPost
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPost
   */
  readonly wordId: string;

  /**
   *
   * @type {any}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPost
   */
  readonly file: any;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPost
   */
  readonly name: string;

  /**
   *
   * @type {string}
   * @memberof AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPost
   */
  readonly filePath: string;
}

/**
 * AudioApi - object-oriented interface
 * @export
 * @class AudioApi
 * @extends {BaseAPI}
 */
export class AudioApi extends BaseAPI {
  /**
   *
   * @param {AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AudioApi
   */
  public v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
    requestParameters: AudioApiV1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDeleteRequest,
    options?: any
  ) {
    return AudioApiFp(this.configuration)
      .v1ProjectsProjectIdWordsWordIdAudioDeleteFileNameDelete(
        requestParameters.projectId,
        requestParameters.wordId,
        requestParameters.fileName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AudioApi
   */
  public v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
    requestParameters: AudioApiV1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGetRequest,
    options?: any
  ) {
    return AudioApiFp(this.configuration)
      .v1ProjectsProjectIdWordsWordIdAudioDownloadFileNameGet(
        requestParameters.projectId,
        requestParameters.wordId,
        requestParameters.fileName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AudioApi
   */
  public v1ProjectsProjectIdWordsWordIdAudioUploadPost(
    requestParameters: AudioApiV1ProjectsProjectIdWordsWordIdAudioUploadPostRequest,
    options?: any
  ) {
    return AudioApiFp(this.configuration)
      .v1ProjectsProjectIdWordsWordIdAudioUploadPost(
        requestParameters.projectId,
        requestParameters.wordId,
        requestParameters.file,
        requestParameters.name,
        requestParameters.filePath,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
