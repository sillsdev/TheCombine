/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
/**
 * EmailVerifyApi - axios parameter creator
 * @export
 */
export const EmailVerifyApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestEmailVerify: async (
      body: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("requestEmailVerify", "body", body);
      const localVarPath = `/v1/users/emailverify`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateEmailToken: async (
      token: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'token' is not null or undefined
      assertParamExists("validateEmailToken", "token", token);
      const localVarPath = `/v1/users/emailverify/validate/{token}`.replace(
        `{${"token"}}`,
        encodeURIComponent(String(token))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmailVerifyApi - functional programming interface
 * @export
 */
export const EmailVerifyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    EmailVerifyApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestEmailVerify(
      body: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestEmailVerify(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validateEmailToken(
      token: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.validateEmailToken(token, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * EmailVerifyApi - factory interface
 * @export
 */
export const EmailVerifyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = EmailVerifyApiFp(configuration);
  return {
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestEmailVerify(body: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .requestEmailVerify(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateEmailToken(token: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .validateEmailToken(token, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for requestEmailVerify operation in EmailVerifyApi.
 * @export
 * @interface EmailVerifyApiRequestEmailVerifyRequest
 */
export interface EmailVerifyApiRequestEmailVerifyRequest {
  /**
   *
   * @type {string}
   * @memberof EmailVerifyApiRequestEmailVerify
   */
  readonly body: string;
}

/**
 * Request parameters for validateEmailToken operation in EmailVerifyApi.
 * @export
 * @interface EmailVerifyApiValidateEmailTokenRequest
 */
export interface EmailVerifyApiValidateEmailTokenRequest {
  /**
   *
   * @type {string}
   * @memberof EmailVerifyApiValidateEmailToken
   */
  readonly token: string;
}

/**
 * EmailVerifyApi - object-oriented interface
 * @export
 * @class EmailVerifyApi
 * @extends {BaseAPI}
 */
export class EmailVerifyApi extends BaseAPI {
  /**
   *
   * @param {EmailVerifyApiRequestEmailVerifyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailVerifyApi
   */
  public requestEmailVerify(
    requestParameters: EmailVerifyApiRequestEmailVerifyRequest,
    options?: any
  ) {
    return EmailVerifyApiFp(this.configuration)
      .requestEmailVerify(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EmailVerifyApiValidateEmailTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailVerifyApi
   */
  public validateEmailToken(
    requestParameters: EmailVerifyApiValidateEmailTokenRequest,
    options?: any
  ) {
    return EmailVerifyApiFp(this.configuration)
      .validateEmailToken(requestParameters.token, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
