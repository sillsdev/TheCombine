/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Project } from "../models";
// @ts-ignore
import { ProjectUserValueTuple } from "../models";
// @ts-ignore
import { SemanticDomainWithSubdomains } from "../models";
// @ts-ignore
import { User } from "../models";
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsDelete: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsDuplicateProjectNameGet: async (
      projectName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectName' is not null or undefined
      assertParamExists(
        "v1ProjectsDuplicateProjectNameGet",
        "projectName",
        projectName
      );
      const localVarPath = `/v1/projects/duplicate/{projectName}`.replace(
        `{${"projectName"}}`,
        encodeURIComponent(String(projectName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsPost: async (
      project: Project,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'project' is not null or undefined
      assertParamExists("v1ProjectsPost", "project", project);
      const localVarPath = `/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        project,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdCharactersPut: async (
      projectId: string,
      project: Project,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdCharactersPut",
        "projectId",
        projectId
      );
      // verify required parameter 'project' is not null or undefined
      assertParamExists("v1ProjectsProjectIdCharactersPut", "project", project);
      const localVarPath = `/v1/projects/{projectId}/characters`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        project,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdDelete: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdDelete", "projectId", projectId);
      const localVarPath = `/v1/projects/{projectId}`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdGet", "projectId", projectId);
      const localVarPath = `/v1/projects/{projectId}`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdPut: async (
      projectId: string,
      project: Project,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdPut", "projectId", projectId);
      // verify required parameter 'project' is not null or undefined
      assertParamExists("v1ProjectsProjectIdPut", "project", project);
      const localVarPath = `/v1/projects/{projectId}`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        project,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdSemanticdomainsGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdSemanticdomainsGet",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/semanticdomains`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsersGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdUsersGet", "projectId", projectId);
      const localVarPath = `/v1/projects/{projectId}/users`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsDelete(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsDelete(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsDuplicateProjectNameGet(
      projectName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsDuplicateProjectNameGet(
        projectName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsPost(
      project: Project,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectUserValueTuple>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsPost(
        project,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdCharactersPut(
      projectId: string,
      project: Project,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdCharactersPut(
        projectId,
        project,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdDelete(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdDelete(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdGet(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdPut(
      projectId: string,
      project: Project,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdPut(
        projectId,
        project,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdSemanticdomainsGet(
      projectId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SemanticDomainWithSubdomains>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdSemanticdomainsGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsersGet(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsersGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsDelete(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .v1ProjectsDelete(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsDuplicateProjectNameGet(
      projectName: string,
      options?: any
    ): AxiosPromise<boolean> {
      return localVarFp
        .v1ProjectsDuplicateProjectNameGet(projectName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsGet(options?: any): AxiosPromise<Array<Project>> {
      return localVarFp
        .v1ProjectsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsPost(
      project: Project,
      options?: any
    ): AxiosPromise<ProjectUserValueTuple> {
      return localVarFp
        .v1ProjectsPost(project, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdCharactersPut(
      projectId: string,
      project: Project,
      options?: any
    ): AxiosPromise<Project> {
      return localVarFp
        .v1ProjectsProjectIdCharactersPut(projectId, project, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdDelete(
      projectId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1ProjectsProjectIdDelete(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Project> {
      return localVarFp
        .v1ProjectsProjectIdGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {Project} project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdPut(
      projectId: string,
      project: Project,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdPut(projectId, project, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdSemanticdomainsGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<SemanticDomainWithSubdomains>> {
      return localVarFp
        .v1ProjectsProjectIdSemanticdomainsGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsersGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .v1ProjectsProjectIdUsersGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsDuplicateProjectNameGet operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsDuplicateProjectNameGetRequest
 */
export interface ProjectApiV1ProjectsDuplicateProjectNameGetRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsDuplicateProjectNameGet
   */
  readonly projectName: string;
}

/**
 * Request parameters for v1ProjectsPost operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsPostRequest
 */
export interface ProjectApiV1ProjectsPostRequest {
  /**
   *
   * @type {Project}
   * @memberof ProjectApiV1ProjectsPost
   */
  readonly project: Project;
}

/**
 * Request parameters for v1ProjectsProjectIdCharactersPut operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdCharactersPutRequest
 */
export interface ProjectApiV1ProjectsProjectIdCharactersPutRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdCharactersPut
   */
  readonly projectId: string;

  /**
   *
   * @type {Project}
   * @memberof ProjectApiV1ProjectsProjectIdCharactersPut
   */
  readonly project: Project;
}

/**
 * Request parameters for v1ProjectsProjectIdDelete operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdDeleteRequest
 */
export interface ProjectApiV1ProjectsProjectIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdDelete
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdGet operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdGetRequest
 */
export interface ProjectApiV1ProjectsProjectIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdPut operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdPutRequest
 */
export interface ProjectApiV1ProjectsProjectIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdPut
   */
  readonly projectId: string;

  /**
   *
   * @type {Project}
   * @memberof ProjectApiV1ProjectsProjectIdPut
   */
  readonly project: Project;
}

/**
 * Request parameters for v1ProjectsProjectIdSemanticdomainsGet operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdSemanticdomainsGetRequest
 */
export interface ProjectApiV1ProjectsProjectIdSemanticdomainsGetRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdSemanticdomainsGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUsersGet operation in ProjectApi.
 * @export
 * @interface ProjectApiV1ProjectsProjectIdUsersGetRequest
 */
export interface ProjectApiV1ProjectsProjectIdUsersGetRequest {
  /**
   *
   * @type {string}
   * @memberof ProjectApiV1ProjectsProjectIdUsersGet
   */
  readonly projectId: string;
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsDelete(options?: any) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsDelete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsDuplicateProjectNameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsDuplicateProjectNameGet(
    requestParameters: ProjectApiV1ProjectsDuplicateProjectNameGetRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsDuplicateProjectNameGet(requestParameters.projectName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsGet(options?: any) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsPost(
    requestParameters: ProjectApiV1ProjectsPostRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsPost(requestParameters.project, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdCharactersPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdCharactersPut(
    requestParameters: ProjectApiV1ProjectsProjectIdCharactersPutRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdCharactersPut(
        requestParameters.projectId,
        requestParameters.project,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdDelete(
    requestParameters: ProjectApiV1ProjectsProjectIdDeleteRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdDelete(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdGet(
    requestParameters: ProjectApiV1ProjectsProjectIdGetRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdPut(
    requestParameters: ProjectApiV1ProjectsProjectIdPutRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdPut(
        requestParameters.projectId,
        requestParameters.project,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdSemanticdomainsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdSemanticdomainsGet(
    requestParameters: ProjectApiV1ProjectsProjectIdSemanticdomainsGetRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdSemanticdomainsGet(
        requestParameters.projectId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProjectApiV1ProjectsProjectIdUsersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public v1ProjectsProjectIdUsersGet(
    requestParameters: ProjectApiV1ProjectsProjectIdUsersGetRequest,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .v1ProjectsProjectIdUsersGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
