/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Edit } from "../models";
// @ts-ignore
import { User } from "../models";
// @ts-ignore
import { UserEdit } from "../models";
// @ts-ignore
import { UserEditStepWrapper } from "../models";
/**
 * UserEditApi - axios parameter creator
 * @export
 */
export const UserEditApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsGet",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/useredits`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsPost: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsPost",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/useredits`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdDelete: async (
      projectId: string,
      userEditId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdDelete",
        "projectId",
        projectId
      );
      // verify required parameter 'userEditId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdDelete",
        "userEditId",
        userEditId
      );
      const localVarPath = `/v1/projects/{projectId}/useredits/{userEditId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userEditId"}}`, encodeURIComponent(String(userEditId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdGet: async (
      projectId: string,
      userEditId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdGet",
        "projectId",
        projectId
      );
      // verify required parameter 'userEditId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdGet",
        "userEditId",
        userEditId
      );
      const localVarPath = `/v1/projects/{projectId}/useredits/{userEditId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userEditId"}}`, encodeURIComponent(String(userEditId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {Edit} edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdPost: async (
      projectId: string,
      userEditId: string,
      edit: Edit,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPost",
        "projectId",
        projectId
      );
      // verify required parameter 'userEditId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPost",
        "userEditId",
        userEditId
      );
      // verify required parameter 'edit' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPost",
        "edit",
        edit
      );
      const localVarPath = `/v1/projects/{projectId}/useredits/{userEditId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userEditId"}}`, encodeURIComponent(String(userEditId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        edit,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {UserEditStepWrapper} userEditStepWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdPut: async (
      projectId: string,
      userEditId: string,
      userEditStepWrapper: UserEditStepWrapper,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPut",
        "projectId",
        projectId
      );
      // verify required parameter 'userEditId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPut",
        "userEditId",
        userEditId
      );
      // verify required parameter 'userEditStepWrapper' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUsereditsUserEditIdPut",
        "userEditStepWrapper",
        userEditStepWrapper
      );
      const localVarPath = `/v1/projects/{projectId}/useredits/{userEditId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userEditId"}}`, encodeURIComponent(String(userEditId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userEditStepWrapper,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserEditApi - functional programming interface
 * @export
 */
export const UserEditApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserEditApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsGet(
      projectId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserEdit>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsPost(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsPost(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsUserEditIdDelete(
      projectId: string,
      userEditId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsUserEditIdDelete(
        projectId,
        userEditId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsUserEditIdGet(
      projectId: string,
      userEditId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEdit>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsUserEditIdGet(
        projectId,
        userEditId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {Edit} edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsUserEditIdPost(
      projectId: string,
      userEditId: string,
      edit: Edit,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsUserEditIdPost(
        projectId,
        userEditId,
        edit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {UserEditStepWrapper} userEditStepWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUsereditsUserEditIdPut(
      projectId: string,
      userEditId: string,
      userEditStepWrapper: UserEditStepWrapper,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUsereditsUserEditIdPut(
        projectId,
        userEditId,
        userEditStepWrapper,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserEditApi - factory interface
 * @export
 */
export const UserEditApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserEditApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<UserEdit>> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsPost(
      projectId: string,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsPost(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdDelete(
      projectId: string,
      userEditId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsUserEditIdDelete(
          projectId,
          userEditId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdGet(
      projectId: string,
      userEditId: string,
      options?: any
    ): AxiosPromise<UserEdit> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsUserEditIdGet(
          projectId,
          userEditId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {Edit} edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdPost(
      projectId: string,
      userEditId: string,
      edit: Edit,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsUserEditIdPost(
          projectId,
          userEditId,
          edit,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userEditId
     * @param {UserEditStepWrapper} userEditStepWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUsereditsUserEditIdPut(
      projectId: string,
      userEditId: string,
      userEditStepWrapper: UserEditStepWrapper,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .v1ProjectsProjectIdUsereditsUserEditIdPut(
          projectId,
          userEditId,
          userEditStepWrapper,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsProjectIdUsereditsGet operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsGetRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUsereditsPost operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsPostRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsPostRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsPost
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUsereditsUserEditIdDelete operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDeleteRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDelete
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDelete
   */
  readonly userEditId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUsereditsUserEditIdGet operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGetRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGet
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGet
   */
  readonly userEditId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUsereditsUserEditIdPost operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPostRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPostRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPost
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPost
   */
  readonly userEditId: string;

  /**
   *
   * @type {Edit}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPost
   */
  readonly edit: Edit;
}

/**
 * Request parameters for v1ProjectsProjectIdUsereditsUserEditIdPut operation in UserEditApi.
 * @export
 * @interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPutRequest
 */
export interface UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPut
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPut
   */
  readonly userEditId: string;

  /**
   *
   * @type {UserEditStepWrapper}
   * @memberof UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPut
   */
  readonly userEditStepWrapper: UserEditStepWrapper;
}

/**
 * UserEditApi - object-oriented interface
 * @export
 * @class UserEditApi
 * @extends {BaseAPI}
 */
export class UserEditApi extends BaseAPI {
  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsGet(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsGetRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsPost(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsPostRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsPost(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsUserEditIdDelete(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsUserEditIdDeleteRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsUserEditIdDelete(
        requestParameters.projectId,
        requestParameters.userEditId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsUserEditIdGet(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsUserEditIdGetRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsUserEditIdGet(
        requestParameters.projectId,
        requestParameters.userEditId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsUserEditIdPost(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPostRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsUserEditIdPost(
        requestParameters.projectId,
        requestParameters.userEditId,
        requestParameters.edit,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEditApi
   */
  public v1ProjectsProjectIdUsereditsUserEditIdPut(
    requestParameters: UserEditApiV1ProjectsProjectIdUsereditsUserEditIdPutRequest,
    options?: any
  ) {
    return UserEditApiFp(this.configuration)
      .v1ProjectsProjectIdUsereditsUserEditIdPut(
        requestParameters.projectId,
        requestParameters.userEditId,
        requestParameters.userEditStepWrapper,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
