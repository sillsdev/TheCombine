/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { EmailInviteData } from "../models";
// @ts-ignore
import { EmailInviteStatus } from "../models";
/**
 * InviteApi - axios parameter creator
 * @export
 */
export const InviteApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InviteProjectIdValidateTokenPut: async (
      projectId: string,
      token: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1InviteProjectIdValidateTokenPut",
        "projectId",
        projectId
      );
      // verify required parameter 'token' is not null or undefined
      assertParamExists("v1InviteProjectIdValidateTokenPut", "token", token);
      const localVarPath = `/v1/invite/{projectId}/validate/{token}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"token"}}`, encodeURIComponent(String(token)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EmailInviteData} emailInviteData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InvitePut: async (
      emailInviteData: EmailInviteData,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'emailInviteData' is not null or undefined
      assertParamExists("v1InvitePut", "emailInviteData", emailInviteData);
      const localVarPath = `/v1/invite`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        emailInviteData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InviteApi - functional programming interface
 * @export
 */
export const InviteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InviteApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1InviteProjectIdValidateTokenPut(
      projectId: string,
      token: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EmailInviteStatus>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1InviteProjectIdValidateTokenPut(
        projectId,
        token,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {EmailInviteData} emailInviteData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1InvitePut(
      emailInviteData: EmailInviteData,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1InvitePut(
        emailInviteData,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InviteApi - factory interface
 * @export
 */
export const InviteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InviteApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InviteProjectIdValidateTokenPut(
      projectId: string,
      token: string,
      options?: any
    ): AxiosPromise<EmailInviteStatus> {
      return localVarFp
        .v1InviteProjectIdValidateTokenPut(projectId, token, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {EmailInviteData} emailInviteData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InvitePut(
      emailInviteData: EmailInviteData,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1InvitePut(emailInviteData, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1InviteProjectIdValidateTokenPut operation in InviteApi.
 * @export
 * @interface InviteApiV1InviteProjectIdValidateTokenPutRequest
 */
export interface InviteApiV1InviteProjectIdValidateTokenPutRequest {
  /**
   *
   * @type {string}
   * @memberof InviteApiV1InviteProjectIdValidateTokenPut
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof InviteApiV1InviteProjectIdValidateTokenPut
   */
  readonly token: string;
}

/**
 * Request parameters for v1InvitePut operation in InviteApi.
 * @export
 * @interface InviteApiV1InvitePutRequest
 */
export interface InviteApiV1InvitePutRequest {
  /**
   *
   * @type {EmailInviteData}
   * @memberof InviteApiV1InvitePut
   */
  readonly emailInviteData: EmailInviteData;
}

/**
 * InviteApi - object-oriented interface
 * @export
 * @class InviteApi
 * @extends {BaseAPI}
 */
export class InviteApi extends BaseAPI {
  /**
   *
   * @param {InviteApiV1InviteProjectIdValidateTokenPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public v1InviteProjectIdValidateTokenPut(
    requestParameters: InviteApiV1InviteProjectIdValidateTokenPutRequest,
    options?: any
  ) {
    return InviteApiFp(this.configuration)
      .v1InviteProjectIdValidateTokenPut(
        requestParameters.projectId,
        requestParameters.token,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InviteApiV1InvitePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public v1InvitePut(
    requestParameters: InviteApiV1InvitePutRequest,
    options?: any
  ) {
    return InviteApiFp(this.configuration)
      .v1InvitePut(requestParameters.emailInviteData, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
