/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { UserRole } from "../models";
/**
 * UserRoleApi - axios parameter creator
 * @export
 */
export const UserRoleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesDelete: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesDelete",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/userroles`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesGet",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/userroles`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {UserRole} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesPost: async (
      projectId: string,
      userRole: UserRole,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesPost",
        "projectId",
        projectId
      );
      // verify required parameter 'userRole' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesPost",
        "userRole",
        userRole
      );
      const localVarPath = `/v1/projects/{projectId}/userroles`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRole,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userId
     * @param {Array<number>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserIdPut: async (
      projectId: string,
      userId: string,
      requestBody: Array<number>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserIdPut",
        "projectId",
        projectId
      );
      // verify required parameter 'userId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserIdPut",
        "userId",
        userId
      );
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserIdPut",
        "requestBody",
        requestBody
      );
      const localVarPath = `/v1/projects/{projectId}/userroles/{userId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserRoleIdDelete: async (
      projectId: string,
      userRoleId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserRoleIdDelete",
        "projectId",
        projectId
      );
      // verify required parameter 'userRoleId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserRoleIdDelete",
        "userRoleId",
        userRoleId
      );
      const localVarPath = `/v1/projects/{projectId}/userroles/{userRoleId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userRoleId"}}`, encodeURIComponent(String(userRoleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserRoleIdGet: async (
      projectId: string,
      userRoleId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserRoleIdGet",
        "projectId",
        projectId
      );
      // verify required parameter 'userRoleId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdUserrolesUserRoleIdGet",
        "userRoleId",
        userRoleId
      );
      const localVarPath = `/v1/projects/{projectId}/userroles/{userRoleId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"userRoleId"}}`, encodeURIComponent(String(userRoleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserRoleApi - functional programming interface
 * @export
 */
export const UserRoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserRoleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesDelete(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesDelete(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesGet(
      projectId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserRole>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {UserRole} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesPost(
      projectId: string,
      userRole: UserRole,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesPost(
        projectId,
        userRole,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userId
     * @param {Array<number>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesUserIdPut(
      projectId: string,
      userId: string,
      requestBody: Array<number>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesUserIdPut(
        projectId,
        userId,
        requestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesUserRoleIdDelete(
      projectId: string,
      userRoleId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesUserRoleIdDelete(
        projectId,
        userRoleId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdUserrolesUserRoleIdGet(
      projectId: string,
      userRoleId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdUserrolesUserRoleIdGet(
        projectId,
        userRoleId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserRoleApi - factory interface
 * @export
 */
export const UserRoleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserRoleApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesDelete(
      projectId: string,
      options?: any
    ): AxiosPromise<boolean> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesDelete(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<UserRole>> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {UserRole} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesPost(
      projectId: string,
      userRole: UserRole,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesPost(projectId, userRole, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userId
     * @param {Array<number>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserIdPut(
      projectId: string,
      userId: string,
      requestBody: Array<number>,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesUserIdPut(
          projectId,
          userId,
          requestBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserRoleIdDelete(
      projectId: string,
      userRoleId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesUserRoleIdDelete(
          projectId,
          userRoleId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} userRoleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdUserrolesUserRoleIdGet(
      projectId: string,
      userRoleId: string,
      options?: any
    ): AxiosPromise<UserRole> {
      return localVarFp
        .v1ProjectsProjectIdUserrolesUserRoleIdGet(
          projectId,
          userRoleId,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsProjectIdUserrolesDelete operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesDeleteRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesDelete
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUserrolesGet operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesGetRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUserrolesPost operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesPostRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesPostRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesPost
   */
  readonly projectId: string;

  /**
   *
   * @type {UserRole}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesPost
   */
  readonly userRole: UserRole;
}

/**
 * Request parameters for v1ProjectsProjectIdUserrolesUserIdPut operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesUserIdPutRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesUserIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserIdPut
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserIdPut
   */
  readonly userId: string;

  /**
   *
   * @type {Array<number>}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserIdPut
   */
  readonly requestBody: Array<number>;
}

/**
 * Request parameters for v1ProjectsProjectIdUserrolesUserRoleIdDelete operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDeleteRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDelete
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDelete
   */
  readonly userRoleId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdUserrolesUserRoleIdGet operation in UserRoleApi.
 * @export
 * @interface UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGetRequest
 */
export interface UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGet
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGet
   */
  readonly userRoleId: string;
}

/**
 * UserRoleApi - object-oriented interface
 * @export
 * @class UserRoleApi
 * @extends {BaseAPI}
 */
export class UserRoleApi extends BaseAPI {
  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesDelete(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesDeleteRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesDelete(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesGet(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesGetRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesPost(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesPostRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesPost(
        requestParameters.projectId,
        requestParameters.userRole,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesUserIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesUserIdPut(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesUserIdPutRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesUserIdPut(
        requestParameters.projectId,
        requestParameters.userId,
        requestParameters.requestBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesUserRoleIdDelete(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdDeleteRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesUserRoleIdDelete(
        requestParameters.projectId,
        requestParameters.userRoleId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRoleApi
   */
  public v1ProjectsProjectIdUserrolesUserRoleIdGet(
    requestParameters: UserRoleApiV1ProjectsProjectIdUserrolesUserRoleIdGetRequest,
    options?: any
  ) {
    return UserRoleApiFp(this.configuration)
      .v1ProjectsProjectIdUserrolesUserRoleIdGet(
        requestParameters.projectId,
        requestParameters.userRoleId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
