/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { MergeWords } from "../models";
// @ts-ignore
import { Word } from "../models";
/**
 * MergeApi - axios parameter creator
 * @export
 */
export const MergeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergeBlacklistAddPut: async (
      projectId: string,
      requestBody: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeBlacklistAddPut",
        "projectId",
        projectId
      );
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeBlacklistAddPut",
        "requestBody",
        requestBody
      );
      const localVarPath = `/v1/projects/{projectId}/merge/blacklist/add`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {number} maxInList
     * @param {number} maxLists
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet: async (
      projectId: string,
      maxInList: number,
      maxLists: number,
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet",
        "projectId",
        projectId
      );
      // verify required parameter 'maxInList' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet",
        "maxInList",
        maxInList
      );
      // verify required parameter 'maxLists' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet",
        "maxLists",
        maxLists
      );
      // verify required parameter 'userId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet",
        "userId",
        userId
      );
      const localVarPath = `/v1/projects/{projectId}/merge/dups/{maxInList}/{maxLists}/{userid}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"maxInList"}}`, encodeURIComponent(String(maxInList)))
        .replace(`{${"maxLists"}}`, encodeURIComponent(String(maxLists)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {Array<MergeWords>} mergeWords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergePut: async (
      projectId: string,
      mergeWords: Array<MergeWords>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdMergePut", "projectId", projectId);
      // verify required parameter 'mergeWords' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdMergePut",
        "mergeWords",
        mergeWords
      );
      const localVarPath = `/v1/projects/{projectId}/merge`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mergeWords,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MergeApi - functional programming interface
 * @export
 */
export const MergeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MergeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdMergeBlacklistAddPut(
      projectId: string,
      requestBody: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdMergeBlacklistAddPut(
        projectId,
        requestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {number} maxInList
     * @param {number} maxLists
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
      projectId: string,
      maxInList: number,
      maxLists: number,
      userId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Array<Word>>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
        projectId,
        maxInList,
        maxLists,
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {Array<MergeWords>} mergeWords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdMergePut(
      projectId: string,
      mergeWords: Array<MergeWords>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdMergePut(
        projectId,
        mergeWords,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * MergeApi - factory interface
 * @export
 */
export const MergeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MergeApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergeBlacklistAddPut(
      projectId: string,
      requestBody: Array<string>,
      options?: any
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .v1ProjectsProjectIdMergeBlacklistAddPut(
          projectId,
          requestBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {number} maxInList
     * @param {number} maxLists
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
      projectId: string,
      maxInList: number,
      maxLists: number,
      userId: string,
      options?: any
    ): AxiosPromise<Array<Array<Word>>> {
      return localVarFp
        .v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
          projectId,
          maxInList,
          maxLists,
          userId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {Array<MergeWords>} mergeWords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdMergePut(
      projectId: string,
      mergeWords: Array<MergeWords>,
      options?: any
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .v1ProjectsProjectIdMergePut(projectId, mergeWords, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsProjectIdMergeBlacklistAddPut operation in MergeApi.
 * @export
 * @interface MergeApiV1ProjectsProjectIdMergeBlacklistAddPutRequest
 */
export interface MergeApiV1ProjectsProjectIdMergeBlacklistAddPutRequest {
  /**
   *
   * @type {string}
   * @memberof MergeApiV1ProjectsProjectIdMergeBlacklistAddPut
   */
  readonly projectId: string;

  /**
   *
   * @type {Array<string>}
   * @memberof MergeApiV1ProjectsProjectIdMergeBlacklistAddPut
   */
  readonly requestBody: Array<string>;
}

/**
 * Request parameters for v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet operation in MergeApi.
 * @export
 * @interface MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGetRequest
 */
export interface MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGetRequest {
  /**
   *
   * @type {string}
   * @memberof MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet
   */
  readonly projectId: string;

  /**
   *
   * @type {number}
   * @memberof MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet
   */
  readonly maxInList: number;

  /**
   *
   * @type {number}
   * @memberof MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet
   */
  readonly maxLists: number;

  /**
   *
   * @type {string}
   * @memberof MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet
   */
  readonly userId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdMergePut operation in MergeApi.
 * @export
 * @interface MergeApiV1ProjectsProjectIdMergePutRequest
 */
export interface MergeApiV1ProjectsProjectIdMergePutRequest {
  /**
   *
   * @type {string}
   * @memberof MergeApiV1ProjectsProjectIdMergePut
   */
  readonly projectId: string;

  /**
   *
   * @type {Array<MergeWords>}
   * @memberof MergeApiV1ProjectsProjectIdMergePut
   */
  readonly mergeWords: Array<MergeWords>;
}

/**
 * MergeApi - object-oriented interface
 * @export
 * @class MergeApi
 * @extends {BaseAPI}
 */
export class MergeApi extends BaseAPI {
  /**
   *
   * @param {MergeApiV1ProjectsProjectIdMergeBlacklistAddPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MergeApi
   */
  public v1ProjectsProjectIdMergeBlacklistAddPut(
    requestParameters: MergeApiV1ProjectsProjectIdMergeBlacklistAddPutRequest,
    options?: any
  ) {
    return MergeApiFp(this.configuration)
      .v1ProjectsProjectIdMergeBlacklistAddPut(
        requestParameters.projectId,
        requestParameters.requestBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MergeApi
   */
  public v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
    requestParameters: MergeApiV1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGetRequest,
    options?: any
  ) {
    return MergeApiFp(this.configuration)
      .v1ProjectsProjectIdMergeDupsMaxInListMaxListsUseridGet(
        requestParameters.projectId,
        requestParameters.maxInList,
        requestParameters.maxLists,
        requestParameters.userId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MergeApiV1ProjectsProjectIdMergePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MergeApi
   */
  public v1ProjectsProjectIdMergePut(
    requestParameters: MergeApiV1ProjectsProjectIdMergePutRequest,
    options?: any
  ) {
    return MergeApiFp(this.configuration)
      .v1ProjectsProjectIdMergePut(
        requestParameters.projectId,
        requestParameters.mergeWords,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
