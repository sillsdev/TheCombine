/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Credentials } from "../models";
// @ts-ignore
import { PasswordResetData } from "../models";
// @ts-ignore
import { PasswordResetRequestData } from "../models";
// @ts-ignore
import { User } from "../models";
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Credentials} credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersAuthenticatePost: async (
      credentials: Credentials,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'credentials' is not null or undefined
      assertParamExists("v1UsersAuthenticatePost", "credentials", credentials);
      const localVarPath = `/v1/users/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        credentials,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PasswordResetRequestData} passwordResetRequestData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersForgotPost: async (
      passwordResetRequestData: PasswordResetRequestData,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'passwordResetRequestData' is not null or undefined
      assertParamExists(
        "v1UsersForgotPost",
        "passwordResetRequestData",
        passwordResetRequestData
      );
      const localVarPath = `/v1/users/forgot`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordResetRequestData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersForgotResetPost: async (
      passwordResetData: PasswordResetData,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'passwordResetData' is not null or undefined
      assertParamExists(
        "v1UsersForgotResetPost",
        "passwordResetData",
        passwordResetData
      );
      const localVarPath = `/v1/users/forgot/reset`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordResetData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersIsemailtakenEmailGet: async (
      email: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists("v1UsersIsemailtakenEmailGet", "email", email);
      const localVarPath = `/v1/users/isemailtaken/{email}`.replace(
        `{${"email"}}`,
        encodeURIComponent(String(email))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersIsusernametakenUsernameGet: async (
      username: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists(
        "v1UsersIsusernametakenUsernameGet",
        "username",
        username
      );
      const localVarPath = `/v1/users/isusernametaken/{username}`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersPost: async (
      user: User,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("v1UsersPost", "user", user);
      const localVarPath = `/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdDelete: async (
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("v1UsersUserIdDelete", "userId", userId);
      const localVarPath = `/v1/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdGet: async (
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("v1UsersUserIdGet", "userId", userId);
      const localVarPath = `/v1/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdPut: async (
      userId: string,
      user: User,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("v1UsersUserIdPut", "userId", userId);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("v1UsersUserIdPut", "user", user);
      const localVarPath = `/v1/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Credentials} credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersAuthenticatePost(
      credentials: Credentials,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAuthenticatePost(
        credentials,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PasswordResetRequestData} passwordResetRequestData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersForgotPost(
      passwordResetRequestData: PasswordResetRequestData,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersForgotPost(
        passwordResetRequestData,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersForgotResetPost(
      passwordResetData: PasswordResetData,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersForgotResetPost(
        passwordResetData,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersIsemailtakenEmailGet(
      email: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIsemailtakenEmailGet(
        email,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersIsusernametakenUsernameGet(
      username: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIsusernametakenUsernameGet(
        username,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersPost(
      user: User,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersPost(
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersUserIdDelete(
      userId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdDelete(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersUserIdGet(
      userId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdGet(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} userId
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersUserIdPut(
      userId: string,
      user: User,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdPut(
        userId,
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @param {Credentials} credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersAuthenticatePost(
      credentials: Credentials,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .v1UsersAuthenticatePost(credentials, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PasswordResetRequestData} passwordResetRequestData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersForgotPost(
      passwordResetRequestData: PasswordResetRequestData,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1UsersForgotPost(passwordResetRequestData, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersForgotResetPost(
      passwordResetData: PasswordResetData,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1UsersForgotResetPost(passwordResetData, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersGet(options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .v1UsersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersIsemailtakenEmailGet(
      email: string,
      options?: any
    ): AxiosPromise<boolean> {
      return localVarFp
        .v1UsersIsemailtakenEmailGet(email, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersIsusernametakenUsernameGet(
      username: string,
      options?: any
    ): AxiosPromise<boolean> {
      return localVarFp
        .v1UsersIsusernametakenUsernameGet(username, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersPost(user: User, options?: any): AxiosPromise<string> {
      return localVarFp
        .v1UsersPost(user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdDelete(userId: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .v1UsersUserIdDelete(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdGet(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .v1UsersUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersUserIdPut(
      userId: string,
      user: User,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1UsersUserIdPut(userId, user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1UsersAuthenticatePost operation in UserApi.
 * @export
 * @interface UserApiV1UsersAuthenticatePostRequest
 */
export interface UserApiV1UsersAuthenticatePostRequest {
  /**
   *
   * @type {Credentials}
   * @memberof UserApiV1UsersAuthenticatePost
   */
  readonly credentials: Credentials;
}

/**
 * Request parameters for v1UsersForgotPost operation in UserApi.
 * @export
 * @interface UserApiV1UsersForgotPostRequest
 */
export interface UserApiV1UsersForgotPostRequest {
  /**
   *
   * @type {PasswordResetRequestData}
   * @memberof UserApiV1UsersForgotPost
   */
  readonly passwordResetRequestData: PasswordResetRequestData;
}

/**
 * Request parameters for v1UsersForgotResetPost operation in UserApi.
 * @export
 * @interface UserApiV1UsersForgotResetPostRequest
 */
export interface UserApiV1UsersForgotResetPostRequest {
  /**
   *
   * @type {PasswordResetData}
   * @memberof UserApiV1UsersForgotResetPost
   */
  readonly passwordResetData: PasswordResetData;
}

/**
 * Request parameters for v1UsersIsemailtakenEmailGet operation in UserApi.
 * @export
 * @interface UserApiV1UsersIsemailtakenEmailGetRequest
 */
export interface UserApiV1UsersIsemailtakenEmailGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiV1UsersIsemailtakenEmailGet
   */
  readonly email: string;
}

/**
 * Request parameters for v1UsersIsusernametakenUsernameGet operation in UserApi.
 * @export
 * @interface UserApiV1UsersIsusernametakenUsernameGetRequest
 */
export interface UserApiV1UsersIsusernametakenUsernameGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiV1UsersIsusernametakenUsernameGet
   */
  readonly username: string;
}

/**
 * Request parameters for v1UsersPost operation in UserApi.
 * @export
 * @interface UserApiV1UsersPostRequest
 */
export interface UserApiV1UsersPostRequest {
  /**
   *
   * @type {User}
   * @memberof UserApiV1UsersPost
   */
  readonly user: User;
}

/**
 * Request parameters for v1UsersUserIdDelete operation in UserApi.
 * @export
 * @interface UserApiV1UsersUserIdDeleteRequest
 */
export interface UserApiV1UsersUserIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiV1UsersUserIdDelete
   */
  readonly userId: string;
}

/**
 * Request parameters for v1UsersUserIdGet operation in UserApi.
 * @export
 * @interface UserApiV1UsersUserIdGetRequest
 */
export interface UserApiV1UsersUserIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiV1UsersUserIdGet
   */
  readonly userId: string;
}

/**
 * Request parameters for v1UsersUserIdPut operation in UserApi.
 * @export
 * @interface UserApiV1UsersUserIdPutRequest
 */
export interface UserApiV1UsersUserIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiV1UsersUserIdPut
   */
  readonly userId: string;

  /**
   *
   * @type {User}
   * @memberof UserApiV1UsersUserIdPut
   */
  readonly user: User;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {UserApiV1UsersAuthenticatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersAuthenticatePost(
    requestParameters: UserApiV1UsersAuthenticatePostRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersAuthenticatePost(requestParameters.credentials, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersForgotPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersForgotPost(
    requestParameters: UserApiV1UsersForgotPostRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersForgotPost(requestParameters.passwordResetRequestData, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersForgotResetPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersForgotResetPost(
    requestParameters: UserApiV1UsersForgotResetPostRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersForgotResetPost(requestParameters.passwordResetData, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersGet(options?: any) {
    return UserApiFp(this.configuration)
      .v1UsersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersIsemailtakenEmailGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersIsemailtakenEmailGet(
    requestParameters: UserApiV1UsersIsemailtakenEmailGetRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersIsemailtakenEmailGet(requestParameters.email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersIsusernametakenUsernameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersIsusernametakenUsernameGet(
    requestParameters: UserApiV1UsersIsusernametakenUsernameGetRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersIsusernametakenUsernameGet(requestParameters.username, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersPost(
    requestParameters: UserApiV1UsersPostRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersPost(requestParameters.user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersUserIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersUserIdDelete(
    requestParameters: UserApiV1UsersUserIdDeleteRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersUserIdDelete(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersUserIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersUserIdGet(
    requestParameters: UserApiV1UsersUserIdGetRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersUserIdGet(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiV1UsersUserIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public v1UsersUserIdPut(
    requestParameters: UserApiV1UsersUserIdPutRequest,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .v1UsersUserIdPut(
        requestParameters.userId,
        requestParameters.user,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
