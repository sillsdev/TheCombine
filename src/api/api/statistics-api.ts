/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { DomainSenseUserCount } from "../models";
// @ts-ignore
import { SemanticDomainCount } from "../models";
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDomainSenseUserCounts: async (
      projectId?: string,
      lang?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/statistics/GetDomainSenseUserCounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (lang !== undefined) {
        localVarQueryParameter["lang"] = lang;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainCounts: async (
      projectId?: string,
      lang?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/statistics/GetSemanticDomainCounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (lang !== undefined) {
        localVarQueryParameter["lang"] = lang;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    StatisticsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDomainSenseUserCounts(
      projectId?: string,
      lang?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DomainSenseUserCount>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDomainSenseUserCounts(
          projectId,
          lang,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSemanticDomainCounts(
      projectId?: string,
      lang?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SemanticDomainCount>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSemanticDomainCounts(
          projectId,
          lang,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StatisticsApiFp(configuration);
  return {
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDomainSenseUserCounts(
      projectId?: string,
      lang?: string,
      options?: any
    ): AxiosPromise<Array<DomainSenseUserCount>> {
      return localVarFp
        .getDomainSenseUserCounts(projectId, lang, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [projectId]
     * @param {string} [lang]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainCounts(
      projectId?: string,
      lang?: string,
      options?: any
    ): AxiosPromise<Array<SemanticDomainCount>> {
      return localVarFp
        .getSemanticDomainCounts(projectId, lang, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getDomainSenseUserCounts operation in StatisticsApi.
 * @export
 * @interface StatisticsApiGetDomainSenseUserCountsRequest
 */
export interface StatisticsApiGetDomainSenseUserCountsRequest {
  /**
   *
   * @type {string}
   * @memberof StatisticsApiGetDomainSenseUserCounts
   */
  readonly projectId?: string;

  /**
   *
   * @type {string}
   * @memberof StatisticsApiGetDomainSenseUserCounts
   */
  readonly lang?: string;
}

/**
 * Request parameters for getSemanticDomainCounts operation in StatisticsApi.
 * @export
 * @interface StatisticsApiGetSemanticDomainCountsRequest
 */
export interface StatisticsApiGetSemanticDomainCountsRequest {
  /**
   *
   * @type {string}
   * @memberof StatisticsApiGetSemanticDomainCounts
   */
  readonly projectId?: string;

  /**
   *
   * @type {string}
   * @memberof StatisticsApiGetSemanticDomainCounts
   */
  readonly lang?: string;
}

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
  /**
   *
   * @param {StatisticsApiGetDomainSenseUserCountsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public getDomainSenseUserCounts(
    requestParameters: StatisticsApiGetDomainSenseUserCountsRequest = {},
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .getDomainSenseUserCounts(
        requestParameters.projectId,
        requestParameters.lang,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {StatisticsApiGetSemanticDomainCountsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public getSemanticDomainCounts(
    requestParameters: StatisticsApiGetSemanticDomainCountsRequest = {},
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .getSemanticDomainCounts(
        requestParameters.projectId,
        requestParameters.lang,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
