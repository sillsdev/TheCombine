/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { SemanticDomainFull } from "../models";
// @ts-ignore
import { SemanticDomainTreeNode } from "../models";
// @ts-ignore
import { SemanticDomainWithSubdomains } from "../models";
/**
 * SemanticDomainApi - axios parameter creator
 * @export
 */
export const SemanticDomainApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemDoms: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("getSemDoms", "projectId", projectId);
      const localVarPath =
        `/v1/semanticdomain/{projectId}/semanticdomains`.replace(
          `{${"projectId"}}`,
          encodeURIComponent(String(projectId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainFull: async (
      id: string,
      lang: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getSemanticDomainFull", "id", id);
      // verify required parameter 'lang' is not null or undefined
      assertParamExists("getSemanticDomainFull", "lang", lang);
      const localVarPath = `/v1/semanticdomain/{lang}/domain/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"lang"}}`, encodeURIComponent(String(lang)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainTreeNode: async (
      id: string,
      lang: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getSemanticDomainTreeNode", "id", id);
      // verify required parameter 'lang' is not null or undefined
      assertParamExists("getSemanticDomainTreeNode", "lang", lang);
      const localVarPath = `/v1/semanticdomain/{lang}/node/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"lang"}}`, encodeURIComponent(String(lang)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SemanticDomainApi - functional programming interface
 * @export
 */
export const SemanticDomainApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SemanticDomainApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSemDoms(
      projectId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SemanticDomainWithSubdomains>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSemDoms(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSemanticDomainFull(
      id: string,
      lang: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SemanticDomainFull>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSemanticDomainFull(
          id,
          lang,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSemanticDomainTreeNode(
      id: string,
      lang: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SemanticDomainTreeNode>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSemanticDomainTreeNode(
          id,
          lang,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SemanticDomainApi - factory interface
 * @export
 */
export const SemanticDomainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SemanticDomainApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemDoms(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<SemanticDomainWithSubdomains>> {
      return localVarFp
        .getSemDoms(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainFull(
      id: string,
      lang: string,
      options?: any
    ): AxiosPromise<SemanticDomainFull> {
      return localVarFp
        .getSemanticDomainFull(id, lang, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticDomainTreeNode(
      id: string,
      lang: string,
      options?: any
    ): AxiosPromise<SemanticDomainTreeNode> {
      return localVarFp
        .getSemanticDomainTreeNode(id, lang, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getSemDoms operation in SemanticDomainApi.
 * @export
 * @interface SemanticDomainApiGetSemDomsRequest
 */
export interface SemanticDomainApiGetSemDomsRequest {
  /**
   *
   * @type {string}
   * @memberof SemanticDomainApiGetSemDoms
   */
  readonly projectId: string;
}

/**
 * Request parameters for getSemanticDomainFull operation in SemanticDomainApi.
 * @export
 * @interface SemanticDomainApiGetSemanticDomainFullRequest
 */
export interface SemanticDomainApiGetSemanticDomainFullRequest {
  /**
   *
   * @type {string}
   * @memberof SemanticDomainApiGetSemanticDomainFull
   */
  readonly id: string;

  /**
   *
   * @type {string}
   * @memberof SemanticDomainApiGetSemanticDomainFull
   */
  readonly lang: string;
}

/**
 * Request parameters for getSemanticDomainTreeNode operation in SemanticDomainApi.
 * @export
 * @interface SemanticDomainApiGetSemanticDomainTreeNodeRequest
 */
export interface SemanticDomainApiGetSemanticDomainTreeNodeRequest {
  /**
   *
   * @type {string}
   * @memberof SemanticDomainApiGetSemanticDomainTreeNode
   */
  readonly id: string;

  /**
   *
   * @type {string}
   * @memberof SemanticDomainApiGetSemanticDomainTreeNode
   */
  readonly lang: string;
}

/**
 * SemanticDomainApi - object-oriented interface
 * @export
 * @class SemanticDomainApi
 * @extends {BaseAPI}
 */
export class SemanticDomainApi extends BaseAPI {
  /**
   *
   * @param {SemanticDomainApiGetSemDomsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SemanticDomainApi
   */
  public getSemDoms(
    requestParameters: SemanticDomainApiGetSemDomsRequest,
    options?: any
  ) {
    return SemanticDomainApiFp(this.configuration)
      .getSemDoms(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SemanticDomainApiGetSemanticDomainFullRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SemanticDomainApi
   */
  public getSemanticDomainFull(
    requestParameters: SemanticDomainApiGetSemanticDomainFullRequest,
    options?: any
  ) {
    return SemanticDomainApiFp(this.configuration)
      .getSemanticDomainFull(
        requestParameters.id,
        requestParameters.lang,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SemanticDomainApiGetSemanticDomainTreeNodeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SemanticDomainApi
   */
  public getSemanticDomainTreeNode(
    requestParameters: SemanticDomainApiGetSemanticDomainTreeNodeRequest,
    options?: any
  ) {
    return SemanticDomainApiFp(this.configuration)
      .getSemanticDomainTreeNode(
        requestParameters.id,
        requestParameters.lang,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
