/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Word } from "../models";
/**
 * WordApi - axios parameter creator
 * @export
 */
export const WordApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsDelete: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsDelete",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/words`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsFrontierGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsFrontierGet",
        "projectId",
        projectId
      );
      const localVarPath = `/v1/projects/{projectId}/words/frontier`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsFrontierWordIdDelete: async (
      projectId: string,
      wordId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsFrontierWordIdDelete",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsFrontierWordIdDelete",
        "wordId",
        wordId
      );
      const localVarPath = `/v1/projects/{projectId}/words/frontier/{wordId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsGet: async (
      projectId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsGet", "projectId", projectId);
      const localVarPath = `/v1/projects/{projectId}/words`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsPost: async (
      projectId: string,
      word: Word,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsPost", "projectId", projectId);
      // verify required parameter 'word' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsPost", "word", word);
      const localVarPath = `/v1/projects/{projectId}/words`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        word,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdGet: async (
      projectId: string,
      wordId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdGet",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsWordIdGet", "wordId", wordId);
      const localVarPath = `/v1/projects/{projectId}/words/{wordId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdPut: async (
      projectId: string,
      wordId: string,
      word: Word,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists(
        "v1ProjectsProjectIdWordsWordIdPut",
        "projectId",
        projectId
      );
      // verify required parameter 'wordId' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsWordIdPut", "wordId", wordId);
      // verify required parameter 'word' is not null or undefined
      assertParamExists("v1ProjectsProjectIdWordsWordIdPut", "word", word);
      const localVarPath = `/v1/projects/{projectId}/words/{wordId}`
        .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"wordId"}}`, encodeURIComponent(String(wordId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        word,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WordApi - functional programming interface
 * @export
 */
export const WordApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WordApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsDelete(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsDelete(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsFrontierGet(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Word>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsFrontierGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsFrontierWordIdDelete(
      projectId: string,
      wordId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsFrontierWordIdDelete(
        projectId,
        wordId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsGet(
      projectId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Word>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsGet(
        projectId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsPost(
      projectId: string,
      word: Word,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsPost(
        projectId,
        word,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsWordIdGet(
      projectId: string,
      wordId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Word>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsWordIdGet(
        projectId,
        wordId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ProjectsProjectIdWordsWordIdPut(
      projectId: string,
      wordId: string,
      word: Word,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsProjectIdWordsWordIdPut(
        projectId,
        wordId,
        word,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * WordApi - factory interface
 * @export
 */
export const WordApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WordApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsDelete(
      projectId: string,
      options?: any
    ): AxiosPromise<boolean> {
      return localVarFp
        .v1ProjectsProjectIdWordsDelete(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsFrontierGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<Word>> {
      return localVarFp
        .v1ProjectsProjectIdWordsFrontierGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsFrontierWordIdDelete(
      projectId: string,
      wordId: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdWordsFrontierWordIdDelete(
          projectId,
          wordId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsGet(
      projectId: string,
      options?: any
    ): AxiosPromise<Array<Word>> {
      return localVarFp
        .v1ProjectsProjectIdWordsGet(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsPost(
      projectId: string,
      word: Word,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdWordsPost(projectId, word, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdGet(
      projectId: string,
      wordId: string,
      options?: any
    ): AxiosPromise<Word> {
      return localVarFp
        .v1ProjectsProjectIdWordsWordIdGet(projectId, wordId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} wordId
     * @param {Word} word
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ProjectsProjectIdWordsWordIdPut(
      projectId: string,
      wordId: string,
      word: Word,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .v1ProjectsProjectIdWordsWordIdPut(projectId, wordId, word, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for v1ProjectsProjectIdWordsDelete operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsDeleteRequest
 */
export interface WordApiV1ProjectsProjectIdWordsDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsDelete
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsFrontierGet operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsFrontierGetRequest
 */
export interface WordApiV1ProjectsProjectIdWordsFrontierGetRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsFrontierGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsFrontierWordIdDelete operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsFrontierWordIdDeleteRequest
 */
export interface WordApiV1ProjectsProjectIdWordsFrontierWordIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsFrontierWordIdDelete
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsFrontierWordIdDelete
   */
  readonly wordId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsGet operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsGetRequest
 */
export interface WordApiV1ProjectsProjectIdWordsGetRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsGet
   */
  readonly projectId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsPost operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsPostRequest
 */
export interface WordApiV1ProjectsProjectIdWordsPostRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsPost
   */
  readonly projectId: string;

  /**
   *
   * @type {Word}
   * @memberof WordApiV1ProjectsProjectIdWordsPost
   */
  readonly word: Word;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsWordIdGet operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsWordIdGetRequest
 */
export interface WordApiV1ProjectsProjectIdWordsWordIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsWordIdGet
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsWordIdGet
   */
  readonly wordId: string;
}

/**
 * Request parameters for v1ProjectsProjectIdWordsWordIdPut operation in WordApi.
 * @export
 * @interface WordApiV1ProjectsProjectIdWordsWordIdPutRequest
 */
export interface WordApiV1ProjectsProjectIdWordsWordIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsWordIdPut
   */
  readonly projectId: string;

  /**
   *
   * @type {string}
   * @memberof WordApiV1ProjectsProjectIdWordsWordIdPut
   */
  readonly wordId: string;

  /**
   *
   * @type {Word}
   * @memberof WordApiV1ProjectsProjectIdWordsWordIdPut
   */
  readonly word: Word;
}

/**
 * WordApi - object-oriented interface
 * @export
 * @class WordApi
 * @extends {BaseAPI}
 */
export class WordApi extends BaseAPI {
  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsDelete(
    requestParameters: WordApiV1ProjectsProjectIdWordsDeleteRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsDelete(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsFrontierGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsFrontierGet(
    requestParameters: WordApiV1ProjectsProjectIdWordsFrontierGetRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsFrontierGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsFrontierWordIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsFrontierWordIdDelete(
    requestParameters: WordApiV1ProjectsProjectIdWordsFrontierWordIdDeleteRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsFrontierWordIdDelete(
        requestParameters.projectId,
        requestParameters.wordId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsGet(
    requestParameters: WordApiV1ProjectsProjectIdWordsGetRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsGet(requestParameters.projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsPost(
    requestParameters: WordApiV1ProjectsProjectIdWordsPostRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsPost(
        requestParameters.projectId,
        requestParameters.word,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsWordIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsWordIdGet(
    requestParameters: WordApiV1ProjectsProjectIdWordsWordIdGetRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsWordIdGet(
        requestParameters.projectId,
        requestParameters.wordId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WordApiV1ProjectsProjectIdWordsWordIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordApi
   */
  public v1ProjectsProjectIdWordsWordIdPut(
    requestParameters: WordApiV1ProjectsProjectIdWordsWordIdPutRequest,
    options?: any
  ) {
    return WordApiFp(this.configuration)
      .v1ProjectsProjectIdWordsWordIdPut(
        requestParameters.projectId,
        requestParameters.wordId,
        requestParameters.word,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
