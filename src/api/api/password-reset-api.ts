/* tslint:disable */
/* eslint-disable */
/**
 * BackendFramework
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { PasswordResetData } from "../models";
/**
 * PasswordResetApi - axios parameter creator
 * @export
 */
export const PasswordResetApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: async (
      passwordResetData: PasswordResetData,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'passwordResetData' is not null or undefined
      assertParamExists(
        "resetPassword",
        "passwordResetData",
        passwordResetData
      );
      const localVarPath = `/v1/users/forgot/reset`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordResetData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordRequest: async (
      body: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("resetPasswordRequest", "body", body);
      const localVarPath = `/v1/users/forgot`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateResetToken: async (
      token: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'token' is not null or undefined
      assertParamExists("validateResetToken", "token", token);
      const localVarPath = `/v1/users/forgot/reset/validate/{token}`.replace(
        `{${"token"}}`,
        encodeURIComponent(String(token))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PasswordResetApi - functional programming interface
 * @export
 */
export const PasswordResetApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PasswordResetApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPassword(
      passwordResetData: PasswordResetData,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(
        passwordResetData,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPasswordRequest(
      body: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resetPasswordRequest(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validateResetToken(
      token: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.validateResetToken(token, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PasswordResetApi - factory interface
 * @export
 */
export const PasswordResetApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PasswordResetApiFp(configuration);
  return {
    /**
     *
     * @param {PasswordResetData} passwordResetData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(
      passwordResetData: PasswordResetData,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .resetPassword(passwordResetData, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordRequest(body: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .resetPasswordRequest(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateResetToken(token: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .validateResetToken(token, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for resetPassword operation in PasswordResetApi.
 * @export
 * @interface PasswordResetApiResetPasswordRequest
 */
export interface PasswordResetApiResetPasswordRequest {
  /**
   *
   * @type {PasswordResetData}
   * @memberof PasswordResetApiResetPassword
   */
  readonly passwordResetData: PasswordResetData;
}

/**
 * Request parameters for resetPasswordRequest operation in PasswordResetApi.
 * @export
 * @interface PasswordResetApiResetPasswordRequestRequest
 */
export interface PasswordResetApiResetPasswordRequestRequest {
  /**
   *
   * @type {string}
   * @memberof PasswordResetApiResetPasswordRequest
   */
  readonly body: string;
}

/**
 * Request parameters for validateResetToken operation in PasswordResetApi.
 * @export
 * @interface PasswordResetApiValidateResetTokenRequest
 */
export interface PasswordResetApiValidateResetTokenRequest {
  /**
   *
   * @type {string}
   * @memberof PasswordResetApiValidateResetToken
   */
  readonly token: string;
}

/**
 * PasswordResetApi - object-oriented interface
 * @export
 * @class PasswordResetApi
 * @extends {BaseAPI}
 */
export class PasswordResetApi extends BaseAPI {
  /**
   *
   * @param {PasswordResetApiResetPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PasswordResetApi
   */
  public resetPassword(
    requestParameters: PasswordResetApiResetPasswordRequest,
    options?: any
  ) {
    return PasswordResetApiFp(this.configuration)
      .resetPassword(requestParameters.passwordResetData, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PasswordResetApiResetPasswordRequestRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PasswordResetApi
   */
  public resetPasswordRequest(
    requestParameters: PasswordResetApiResetPasswordRequestRequest,
    options?: any
  ) {
    return PasswordResetApiFp(this.configuration)
      .resetPasswordRequest(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PasswordResetApiValidateResetTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PasswordResetApi
   */
  public validateResetToken(
    requestParameters: PasswordResetApiValidateResetTokenRequest,
    options?: any
  ) {
    return PasswordResetApiFp(this.configuration)
      .validateResetToken(requestParameters.token, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
