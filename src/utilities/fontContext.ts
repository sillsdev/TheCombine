import { createContext } from "react";

import { Project } from "api/models";
import { Hash } from "types/hash";

// Fallbacks copied from public/fonts/fallback.json
// generated by python scripts/get_fonts_dev.py
const fallback: Hash<string> = {
  NotoSansCJKJP: "Noto Sans JP",
  NotoSansCJKKR: "Noto Sans KR",
  NotoSansCJKSC: "Noto Sans SC",
  NotoSansCJKTC: "Noto Sans TC",
  NotoSerifCJKJP: "Noto Serif JP",
  NotoSerifCJKKR: "Noto Serif KR",
  NotoSerifCJKSC: "Noto Serif SC",
  NotoSerifCJKTC: "Noto Serif TC",
  NotoSansDuployan: "Noto Sans Duployan",
  NotoSerif: "Noto Serif",
  NotoSerifLatin: "Noto Serif",
};

export class ProjectFonts {
  readonly analysisFont: string;
  private readonly inherit = "inherit";
  private readonly langMap: Hash<string> = {};
  readonly vernacularFont: string;

  constructor(proj?: Project) {
    this.analysisFont = this.inherit;
    this.vernacularFont = this.inherit;
    if (!proj) {
      return;
    }

    proj.analysisWritingSystems.reverse().forEach((ws) => {
      const font = ProjectFonts.clean(ws.font);
      if (font) {
        this.langMap[ws.bcp47] = font;
      }
    });

    if (proj.analysisWritingSystems.length) {
      this.analysisFont =
        ProjectFonts.clean(proj.analysisWritingSystems[0].font) || this.inherit;
    }

    const vernFont = ProjectFonts.clean(proj.vernacularWritingSystem.font);
    if (vernFont) {
      this.vernacularFont = vernFont;
      this.langMap[proj.vernacularWritingSystem.bcp47] = vernFont;
    }
  }

  private static clean(font: string): string {
    font = font.replaceAll(" ", "");
    return font in fallback ? fallback[font] : font;
  }

  getLangFont(bcp47: string): string {
    if (bcp47 in this.langMap) {
      return this.langMap[bcp47] || this.inherit;
    }
    return this.inherit;
  }
}

const FontContext = createContext<ProjectFonts>(new ProjectFonts());

export default FontContext;
