#! /usr/bin/env bash

get-password () {
  PASS1="foo"
  PASS2="bar"
  while [ "$PASS1" != "$PASS2" ] ; do
    read -s -p "$1 " PASS1
    read -s -p $'\n'"Confirm password: " PASS2
  done
  echo "$PASS1"
}

set-combine-env () {
  if [ ! -f "${CONFIG_DIR}/env" ] ; then
    # Collect values from user
    COMBINE_JWT_SECRET_KEY=`LC_ALL=C tr -dc 'A-Za-z0-9*\-_@!' </dev/urandom | head -c 64; echo`
    read -p "Enter name for the site admin account: " COMBINE_ADMIN_USERNAME
    COMBINE_ADMIN_PASSWORD=$(get-password "Enter a password for the ${COMBINE_ADMIN_USERNAME} account:")
    echo -e "\n"
    read -p "Enter AWS_ACCESS_KEY_ID: " AWS_ACCESS_KEY_ID
    read -p "Enter AWS_SECRET_ACCESS_KEY: " AWS_SECRET_ACCESS_KEY
    # write collected values and static values to config file
    cat <<.EOF > ${CONFIG_DIR}/env
    export COMBINE_JWT_SECRET_KEY="${COMBINE_JWT_SECRET_KEY}"
    export COMBINE_ADMIN_PASSWORD="${COMBINE_ADMIN_PASSWORD}"
    export COMBINE_ADMIN_USERNAME="${COMBINE_ADMIN_USERNAME}"
    export AWS_DEFAULT_REGION="us-east-1"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
    export COMBINE_SMTP_USERNAME="nobody"
.EOF
  fi
  source ${CONFIG_DIR}/env
}

#####
# Mark our place
INSTALL_DIR=`pwd`
mkdir -p ${HOME}/.combine
COMBINE_DIR=${HOME}/.combine
print-instructions () {
#####
# Let the user know what to expect
  echo "\n
Setting up the software environment and WiFi Access Point\n
used by The Combine.  You will be prompted for your password twice to allow\n
the script to setup system services.  One prompt will look like:\n
\n
   [sudo] password for ${USER}:\n
\n
Afterwards, you will see a\n
\n
   BECOME password: \n
\n
prompt, enter your password here as well."
}

install-kubernetes () {
  cd $INSTALL_DIR
  # Install required packages
  sudo apt install -y python3-pip python3-venv

  #####
  # Setup Python to run ansible
  python3 -m venv venv
  source venv/bin/activate
  python -m pip install --upgrade pip pip-tools
  python -m piptools sync requirements.txt

  #####
  # Setup Kubernetes environment and WiFi Access Point
  cd ${INSTALL_DIR}/ansible
  ansible-playbook playbook_desktop_setup.yaml -K
}

restart-install () {
  cat <<.EOM
***** Restart required *****

Rerun $0 after the system has been restarted.

.EOM
  read -p "Restart now? (Y/n) " RESTART
  if [[ -z $RESTART || $RESTART =~ ^[yY].* ]] ; then
    sudo reboot
  fi
  exit 0
}

set-k3s-env () {
  #####
  # Setup kubectl configuration file
  K3S_CONFIG_FILE=${HOME}/.kube/config
  if [ ! -e ${K3S_CONFIG_FILE} ] ; then
    echo >2 "Kubernetes (k3s) configuration file is missing."
    exit 1
  fi
  export KUBECONFIG=${K3S_CONFIG_FILE}
}

copy-install-scripts () {
  cp -r ${INSTALL_DIR}/helm ${COMBINE_DIR}
  cp -r ${INSTALL_DIR}/scripts ${COMBINE_DIR}
  cp -r ${INSTALL_DIR}/venv ${COMBINE_DIR}
  pushd ${COMBINE_DIR}/venv/bin > /dev/null
  sed -i "s|${INSTALL_DIR}|${COMBINE_DIR}|g" *
  popd > /dev/null
}

install-required-charts () {
  set-k3s-env
  #####
  # Install base helm charts
  helm repo add stable https://charts.helm.sh/stable
  helm repo add bitnami https://charts.bitnami.com/bitnami

  #####
  # Setup required cluster services
  cd ${COMBINE_DIR}
  . venv/bin/activate
  cd ${COMBINE_DIR}/scripts
  ./setup_cluster.py
  deactivate
}

install-the-combine () {
  #####
  # Setup The Combine
  cd ${COMBINE_DIR}
  . venv/bin/activate
  cd ${COMBINE_DIR}/scripts
  set-combine-env
  set-k3s-env
  ./setup_combine.py --tag v1.1.6 --repo public.ecr.aws/thecombine --target desktop
  deactivate
}

# Create directory for configuration files 
CONFIG_DIR=${HOME}/.config/combine
mkdir -p ${CONFIG_DIR}

# See if we need to continue from a previous install
STATE_FILE=${HOME}/.config/combine/install-state
if [ -f ${STATE_FILE} ] ; then
  STATE=`cat ${STATE_FILE}`
else
  STATE=pre-reqs
fi

# Parse arguments to customize installation
while (( "$#" )) ; do
  OPT=$1
  case $OPT in
    --version|-v)
      if [[ $# > 1 ]] ; then
        $COMBINE_VERSION=$2
        shift
      fi
      ;;
    --update|-u)
      if [[ $# > 1 ]] ; then
        $COMBINE_VERSION=$2
        shift
        STATE=Combine
      fi
      ;;
    --clean)
      STATE=pre-reqs
      if [ -f ${CONFIG_DIR}/env ] ; then
        rm ${CONFIG_DIR}/env
      fi
      ;;
    --restart)
      STATE=pre-reqs
      ;;
    *)
      echo "Unrecognized option: $OPT" >2
      ;;
  esac
  shift
done

# Step through the installation stages
while [ "$STATE" != "Done" ] ; do
  case $STATE in
    pre-reqs)
      echo -e `print-instructions`
      install-kubernetes
      copy-install-scripts
      STATE=Base_charts
      echo -n ${STATE} > ${STATE_FILE}
      restart-install
      ;;
    Base_charts)
      install-required-charts
      STATE=Combine
      echo -n ${STATE} > ${STATE_FILE}
      ;;
    Combine)
      install-the-combine
      STATE="Done"
      rm ${STATE_FILE}
      ;;
    *)
      echo "Unrecognized STATE: ${STATE}"
      rm ${STATE_FILE}
      exit 1
      ;;
  esac
done
