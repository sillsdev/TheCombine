apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Values.awsEcr.jobName }}"
  namespace: {{ .Release.Namespace }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  # keep completed jobs for 24 hrs so that logs are
  # available in case of issues
  ttlSecondsAfterFinished: 86400
  template:
    metadata:
      creationTimestamp: null
    spec:
      serviceAccountName: {{ .Values.awsEcr.serviceAccount }}
      containers:
      - image: {{ .Values.awsEcr.image }}:{{ .Values.awsEcr.imageTag }}
        imagePullPolicy: IfNotPresent
        name: "{{ .Values.awsEcr.jobName }}"
        command:
        - /bin/sh
        - -c
        - |-
          SECRET_NAME={{ image_pull_secret }}
          TOKEN=`aws ecr get-login --region ${AWS_DEFAULT_REGION} --registry-ids ${AWS_ACCOUNT} | cut -d' ' -f6`
          echo "ENV variables setup done."
          kubectl -n {{ app_namespace }} delete secret --ignore-not-found ${SECRET_NAME}
          kubectl -n {{ app_namespace }} create secret docker-registry ${SECRET_NAME} \
          --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com \
          --docker-username=AWS \
          --docker-password="${TOKEN}" \
          --docker-email="{{ combine_admin_email }}"
          echo "Secret created by name. $SECRET_NAME"
          kubectl -n {{ app_namespace }} patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'   # custom script | update the default service account
          echo "All done."
        env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              key: AWS_DEFAULT_REGION
              name: "{{ .Values.awsEcr.secretsName }}"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: "{{ .Values.awsEcr.secretsName }}"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: "{{ .Values.awsEcr.secretsName }}"
        - name: AWS_ACCOUNT
          valueFrom:
            secretKeyRef:
              key: AWS_ACCOUNT
              name: "{{ .Values.awsEcr.secretsName }}"
        - name: NAMESPACES
          valueFrom:
            configMapKeyRef:
              key: NAMESPACES
              name: "{{ .Values.awsEcr.configName }}"
        - name: PULL_SECRET_NAME
          valueFrom:
            configMapKeyRef:
              key: PULL_SECRET_NAME
              name: "{{ .Values.awsEcr.configName }}"
        - name: DOCKER_EMAIL
          valueFrom:
            configMapKeyRef:
              key: DOCKER_EMAIL
              name: "{{ .Values.awsEcr.configName }}"
        resources:
          limits:
            memory: 500Mi
          requests:
            memory: 500Mi
        securityContext:
          capabilities: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: Default
      restartPolicy: Never
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
