---

- name: install OpenSSL Python library
  pip:
    name: pyOpenSSL

- name: Install packages.
  apt: name=openssl state=present
  # when: ansible_os_family == "Debian"

- name: create self-signed certificate for backend
  import_role:
    name: ssl_config

- name: export PKCS12 certificate
  openssl_pkcs12:
    action: export
    certificate_path: "{{ ssl_path }}/{{ backend_cert_name }}"
    privatekey_path: "{{ ssl_path }}/{{ backend_key_name }}"
    path: "{{ ssl_path }}/{{ backend_pfx_cert_name }}"
    friendly_name: "The Combine Internal Certificate"
    group:  "{{ combine_group }}"
    owner:  "{{ combine_user }}"
    mode:   0600
    passphrase: "{{ backend_cert_password }}"

- name: install the cert utils
  apt:
    name: libnss3-tools

- name: create directory for the certificate database
  file:
    path: "/home/{{ combine_user }}/.pki/nssdb"
    state: directory
    owner: "{{ combine_user }}"
    group: "{{ combine_group }}"
    mode: 0755

- name: create the NSS database
  command: "certutil -N -d sql:/home/{{ combine_user }}/.pki/nssdb --empty-password"
  args:
    creates: "/home/{{ combine_user }}/.pki/nssdb/cert9.db"
  become_user: "{{ combine_user }}"

- name: trust the certificate (SSL)
  command: "pk12util -d sql:/home/{{ combine_user }}/.pki/nssdb -i {{ backend_pfx_cert_name }} -W \"{{ backend_cert_password }}\""
  args:
    chdir: "{{ ssl_path }}"
  become_user: "{{ combine_user }}"

- name: update the appsettings to configure Kestrel to use the new certificate
  template:
    src: appsettings.Production.json.j2
    dest: "{{ combine_backend_dir }}/publish/appsettings.Production.json"
    owner: "{{ combine_user }}"
    group: "{{ combine_group }}"
    mode: 0600
