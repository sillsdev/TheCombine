apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  name: ecr-cred-helper
  namespace: {{ app_namespace }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - image: odaniait/aws-kubectl:latest   # the base iamge to be used to run our shell script
            imagePullPolicy: IfNotPresent
            name: ecr-cred-helper
            command:
            - /bin/sh
            - -c
            - |-
              SECRET_NAME={{ aws_ecr_login.secret_name }}
              TOKEN=`aws ecr get-login --region ${AWS_DEFAULT_REGION} --registry-ids ${AWS_ACCOUNT} | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found ${SECRET_NAME}
              kubectl create secret docker-registry ${SECRET_NAME} \
              --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${TOKEN}" \
              --docker-email="{{ combine_admin_email }}"
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'   # custom script | update the deafult servciee account
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  key: AWS_REGION
                  name: aws-credential-secret
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: aws-credential-secret
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: aws-credential-secret
            - name: AWS_ACCOUNT
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCOUNT
                  name: aws-credential-secret

            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: "{{ aws_ecr_login.schedule }}"
  successfulJobsHistoryLimit: 1
  suspend: false
