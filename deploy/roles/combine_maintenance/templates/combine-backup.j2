#!/bin/bash

######################################################
# Backup job for docker containers running TheCombine
######################################################

set -e

usage() {
  cat <<USAGE
  Usage: $0 [options]
     Creates a backup of the combine database and backend containers
  Options:
     -h: help - print this message
     -v: verbose - print progress of backup
USAGE
}

. $(cd $(dirname $0); pwd)/combine-env

while [[ $# -gt 0 ]] ; do
  arg="$1"

  case ${arg} in
    -h|--help)
        usage
        exit 0
        ;;
    -v|--verbose)
        VERBOSE="1"
        QUIET_OPT=""
        ;;
    -?)
        echo "Invalid option: ${arg}."
        usage
        exit 2
        ;;
    *)
        echo "Unrecognized argument: ${arg}"
        usage
        exit 1
        ;;
  esac
  shift
done

print_step "Setup some useful environment variables."
DATE_STR=`date +%Y-%m-%d-%H-%M-%S`
COMBINE_HOST="{{ combine_server_name | replace('.', '-') }}"
BACKUP_FILE="combine-backup.tar.gz"
AWS_FILE="${AWS_BUCKET}/${COMBINE_HOST}-${DATE_STR}.tar.gz"
# turn off the color coding for docker-compose output - adds unreadable escape
# characters to syslog
COMPOSE_OPTS="--no-ansi"

cd ${COMBINE_APP_DIR}

print_step "Prepare the backup directory."
if [ ! -e "${BACKUP_DIR}" ] ; then
  mkdir -p ${BACKUP_DIR}
else
  for item in ${BACKUP_DIR}/${DB_FILES_SUBDIR} ${BACKUP_DIR}/${BACKEND_FILES_SUBDIR} ${BACKUP_DIR}/${BACKUP_FILE}
  do
    if [ -e "${item}" ] ; then
      rm -rf ${item}
    fi
  done
fi

print_step "Stop the frontend and certmgr containers."
/usr/local/bin/docker-compose ${COMPOSE_OPTS} stop --timeout 0 frontend certmgr

print_step "Dump the database."
/usr/local/bin/docker-compose ${COMPOSE_OPTS} exec -T database /usr/bin/mongodump --db=CombineDatabase --gzip ${QUIET_OPT}
DB_CONTAINER=`docker ps | grep database | sed "s/.* \([^ ][^ ]*\)$/\1/"`
docker cp ${DB_CONTAINER}:${DB_FILES_SUBDIR}/ ${BACKUP_DIR}

print_step "Copy the backend files (commands are run relative the 'app' user's home directory)."
BE_CONTAINER=`docker ps | grep backend | sed "s/.* \([^ ][^ ]*\)$/\1/"`
docker cp ${BE_CONTAINER}:/home/app/${BACKEND_FILES_SUBDIR}/ ${BACKUP_DIR}

print_step "Create the tarball for the backup."
cd ${BACKUP_DIR}
tar --create --file=${BACKUP_FILE} --gzip ${BACKEND_FILES_SUBDIR} ${DB_FILES_SUBDIR}

print_step "Push backup to AWS S3 storage."
#    need to specify full path because $PATH does not contain
#    /usr/local/bin when run as a cron job
/usr/local/bin/aws ${QUIET_OPT} s3 cp ${BACKUP_FILE} ${AWS_FILE} --profile {{ aws_s3_profile }}

print_step "Remove backup files."
# Running in ${BACKUP_DIR}
rm -rf ${BACKEND_FILES_SUBDIR} ${DB_FILES_SUBDIR}
ALL_BACKUPS=(`ls combine-backup*.tar.gz`)
rm ${BACKUP_FILE}

print_step "Restart the frontend and certmgr containers."
cd ${COMBINE_APP_DIR}
/usr/local/bin/docker-compose ${COMPOSE_OPTS} start certmgr frontend
