#!/bin/bash

######################################################
# Backup job for docker containers running TheCombine
######################################################

set -e

VERBOSE="0"

echo_verbose() {
  if [ "${VERBOSE}" == "1" ] ; then
    echo $@
  fi
}

usage() {
  cat <<USAGE
  Usage: $0 [-h] [-v]
     Creates a backup of the combine database and backend containers
  Options:
     -h: help - print this message
     -v: verbose - print progress of backup
USAGE
}

while [[ $# -gt 0 ]] ; do
  arg="$1"

  case ${arg} in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--verbose)
      VERBOSE="1"
      ;;
    -?)
      echo "Invalid option: ${arg}."
      usage
      exit 2
      ;;
    *)
      echo "Unrecognized argument: ${arg}"
      usage
      exit 1
      ;;
  esac
  shift
done

echo_verbose "1. Setup some useful environment variables."
DATE_STR=`date +%Y-%m-%d-%H-%M-%S`
COMBINE_HOST="{{ combine_server_name | replace('.', '-') }}"
BACKUP_FILE="combine-backup.tar.gz"
AWS_FILE="s3://{{ aws_s3_backup_loc }}/${COMBINE_HOST}-${DATE_STR}.tar.gz"
COMBINE_APP_DIR=${COMBINE_APP_DIR:="{{ combine_app_dir }}"}
BACKUP_DIR=${BACKUP_DIR:="{{ combine_backup_dir }}"}
BACKEND_FILES_SUBDIR="{{ backend_files_subdir }}"
DB_FILES_SUBDIR="{{ mongo_files_subdir }}"

cd ${COMBINE_APP_DIR}

echo_verbose "2. Prepare the backup directory."
if [ ! -e "${BACKUP_DIR}" ] ; then
  mkdir -p ${BACKUP_DIR}
else
  for item in ${BACKUP_DIR}/${DB_FILES_SUBDIR} ${BACKUP_DIR}/${BACKEND_FILES_SUBDIR} ${BACKUP_DIR}/${BACKUP_FILE}
  do
    if [ -e "${item}" ] ; then
      rm -rf ${item}
    fi
  done
fi

echo_verbose "3. Stop the current containers."
docker-compose down

echo_verbose "4. Start up just the backend and the database."
aws ecr get-login-password --profile {{ aws_ecr_profile }} | docker login --username AWS --password-stdin {{ aws_ecr }}
docker-compose up --detach database backend


echo_verbose "5. Dump the database."
docker-compose exec database mongodump --db CombineDatabase --gzip --quiet
DB_CONTAINER=`docker ps | grep database | sed "s/.* \([^ ][^ ]*\)$/\1/"`
docker cp ${DB_CONTAINER}:${DB_FILES_SUBDIR}/ ${BACKUP_DIR}

echo_verbose "6. Copy the backend files (commands are run relative the 'app' user's home directory)."
BE_CONTAINER=`docker ps | grep backend | sed "s/.* \([^ ][^ ]*\)$/\1/"`
docker cp ${BE_CONTAINER}:/home/app/${BACKEND_FILES_SUBDIR}/ ${BACKUP_DIR}

echo_verbose "7. Create the tarball for the backup."
cd ${BACKUP_DIR}
tar --create --file=${BACKUP_FILE} --gzip --verbose ${BACKEND_FILES_SUBDIR} ${DB_FILES_SUBDIR}

echo_verbose "8. Remove old backup files."
# Running in ${BACKUP_DIR}
rm -rf ${BACKEND_FILES_SUBDIR} ${DB_FILES_SUBDIR}
ALL_BACKUPS=(`ls combine-backup*.tar.gz`)

for bu in "${ALL_BACKUPS[@]}"; do
  if [ "$bu" != "$BACKUP_FILE" ] ; then
  	  echo "Removing $bu"
      rm $bu
  fi
done

echo_verbose "9. Push backup to AWS S3 storage."
#    need to specify full path because $PATH does not contain
#    /usr/local/bin when run as a cron job
/usr/local/bin/aws s3 cp ${BACKUP_FILE} ${AWS_FILE} --profile {{ aws_backup_profile }}

echo_verbose "10. Restart the containers."
cd ${COMBINE_APP_DIR}
docker-compose down
docker-compose up --detach
