---
- name: create production docker-compose file
  template:
    src: docker-compose.prod.yml.j2
    dest: "{{ source_dir }}/docker-compose.prod.yml"
    owner: root
    group: root
    mode: 0600

- name: create init docker-compose file
  debug:
    msg: "TODO: Create compose file to initialize the database"

# - name: create production Dockerfile for frontend
#   template:
#     src: Dockerfile.prod.j2
#     dest: "{{ source_dir }}/Dockerfile.prod"
#     owner: root
#     group: root
#     mode: 0600
#
- name: create backend .env file
  template:
    src: env.backend.j2
    dest: "{{ source_dir }}/.env.backend"
    owner: root
    group: root
    mode: 0600

# - name: create nginx config directory
#   file:
#     name: "{{ source_dir }}/{{ nginx_config }}"
#     state: directory
#     owner: root
#     group: root
#     mode: 0755
#
# - name: create nginx config file
#   template:
#     src: thecombine.conf.j2
#     dest: "{{ source_dir }}/{{ nginx_config }}/thecombine.conf"
#     owner: root
#     group: root
#     mode: 0600
#
# - name: create runtime config directory
#   file:
#     name: "{{ source_dir }}/{{ config_dir }}"
#     state: directory
#     owner: root
#     group: root
#     mode:  0755
#
# - name: create frontend config.js
#   template:
#     src: config.js.j2
#     dest: "{{ source_dir }}/{{ config_dir }}/config.js"
#     owner: root
#     group: root
#     mode: 0644
#
- name: build the containers
  command: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build --parallel
  args:
    chdir: "{{ source_dir }}"

- name: initialize containers
  debug:
    msg: "TODO: Initialize the database"

- name: start the containers
  command: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --detach
  args:
    chdir: "{{ source_dir }}"
